AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: ""
Resources:
    LambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction.Arn
            Principal: "s3.amazonaws.com"
            SourceArn: !Sub "arn:aws:s3:::6998-photo-album-b2-cf"

    LambdaPermission2:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction2.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/search"

    LambdaPermission3:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction2.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/search"

    LambdaPermission4:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction2.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/search"

    LambdaPermission5:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction2.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/search"

    LambdaPermission6:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction2.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/search"

    LambdaPermission7:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction2.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/search"

    LambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            Environment:
                Variables:
                    OS_HOST: !GetAtt OpenSearchServiceDomain.DomainEndpoint
                    SECRET_KEY: ""
                    KEY_ID: ""

            FunctionName: "LF1-photo-cf"
            Handler: "lambda_function.lambda_handler"
            Architectures:
              - "x86_64"
            Code:
              ZipFile: |
                def lambda_handler(event, context):
                  return 0
            MemorySize: 128
            Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/LF1-photo-role"
            Runtime: "python3.9"
            Timeout: 10
            TracingConfig:
                Mode: "PassThrough"
            EphemeralStorage:
                Size: 512

    LambdaFunction2:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            Environment:
                Variables:
                    OS_HOST: !GetAtt OpenSearchServiceDomain.DomainEndpoint
            FunctionName: "LF2-photo-cf"
            Handler: "lambda_function.lambda_handler"
            Architectures:
              - "x86_64"
            Code:
              ZipFile: |
                def lambda_handler(event, context):
                  return 0
            MemorySize: 128
            Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/LF2-photo-role-5viitgn2"
            Runtime: "python3.9"
            Timeout: 10
            TracingConfig:
                Mode: "PassThrough"
            EphemeralStorage:
                Size: 512

    S3BucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Sid: "PublicReadGetObject"
                    Effect: "Allow"
                    Principal: "*"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"

    S3BucketPolicy2:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket2
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Sid: "PublicReadGetObject"
                    Effect: "Allow"
                    Principal: "*"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket2}/*"

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "6998-photo-album-b2-cf"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            NotificationConfiguration:
                LambdaConfigurations:
                  -
                    Event: "s3:ObjectCreated:Put"
                    Function: !GetAtt LambdaFunction.Arn

    S3Bucket2:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "6998-photo-album-frontend-cf"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            WebsiteConfiguration:
                IndexDocument: "index.html"

    ApiGatewayRestApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: !Sub "AI photo Search cf"
            Description: !Sub "AI photo Search application, built during the Cloud and Big Data course at Columbia University."
            ApiKeySourceType: "HEADER"
            BinaryMediaTypes:
              - "image/jpg"
              - "image/png"
              - "image/jpeg"
            EndpointConfiguration:
                Types:
                  - "REGIONAL"

    ApiGatewayStage:
        Type: "AWS::ApiGateway::Stage"
        Properties:
            StageName: "dev"
            DeploymentId: !Ref ApiGatewayDeployment
            RestApiId: !Ref ApiGatewayRestApi
            CacheClusterEnabled: false
            CacheClusterSize: "0.5"
            MethodSettings:
              -
                CacheDataEncrypted: false
                CacheTtlInSeconds: 300
                CachingEnabled: false
                DataTraceEnabled: false
                HttpMethod: "*"
                LoggingLevel: "ERROR"
                MetricsEnabled: true
                ResourcePath: "/*"
                ThrottlingBurstLimit: 5000
                ThrottlingRateLimit: 10000
            TracingEnabled: false

    ApiGatewayDeployment:
        Type: "AWS::ApiGateway::Deployment"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
        DependsOn:
          - "ApiGatewayMethod"
          - "ApiGatewayMethod2"
          - "ApiGatewayMethod3"
          - "ApiGatewayMethod4"

    ApiGatewayResource:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            PathPart: "upload"
            ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

    ApiGatewayResource2:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            PathPart: "{bucket}"
            ParentId: !Ref ApiGatewayResource

    ApiGatewayResource3:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            PathPart: "search"
            ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

    ApiGatewayResource4:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            PathPart: "{key}"
            ParentId: !Ref ApiGatewayResource2

    ApiGatewayMethod:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResource3
            HttpMethod: "OPTIONS"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            RequestParameters: {}
            MethodResponses:
              -
                ResponseParameters:
                    "method.response.header.Access-Control-Allow-Headers": false
                    "method.response.header.Access-Control-Allow-Methods": false
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
            Integration:
                CacheNamespace: !Ref ApiGatewayResource3
                IntegrationResponses:
                  -
                    ResponseParameters:
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'"
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                RequestTemplates:
                    "application/json": "{\"statusCode\": 200}"
                TimeoutInMillis: 29000
                Type: "MOCK"

    ApiGatewayMethod2:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResource3
            HttpMethod: "GET"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            OperationName: !Sub "searchphotos"
            RequestParameters:
                "method.request.querystring.q": true
            MethodResponses:
              -
                ResponseModels:
                    "application/json": !Ref ApiGatewayModel3
                ResponseParameters:
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
              -
                ResponseModels:
                    "application/json": !Ref ApiGatewayModel
                StatusCode: "403"
              -
                ResponseModels:
                    "application/json": !Ref ApiGatewayModel
                StatusCode: "500"
            Integration:
                CacheNamespace: !Ref ApiGatewayResource3
                ContentHandling: "CONVERT_TO_TEXT"
                IntegrationHttpMethod: "POST"
                IntegrationResponses:
                  -
                    ResponseParameters:
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                TimeoutInMillis: 29000
                Type: "AWS_PROXY"
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction2}/invocations"

    ApiGatewayMethod3:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResource4
            HttpMethod: "PUT"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            OperationName: !Sub "uploadphotos"
            RequestParameters:
                "method.request.header.Content-Type": false
                "method.request.header.x-amz-meta-customLabels": false
                "method.request.path.bucket": true
                "method.request.path.key": true
            MethodResponses:
              -
                ResponseModels:
                    "application/json": !Ref ApiGatewayModel4
                ResponseParameters:
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
              -
                ResponseModels:
                    "application/json": !Ref ApiGatewayModel
                StatusCode: "403"
              -
                ResponseModels:
                    "application/json": !Ref ApiGatewayModel
                StatusCode: "500"
            Integration:
                CacheNamespace: !Ref ApiGatewayResource4
                Credentials: !GetAtt IAMRole.Arn
                IntegrationHttpMethod: "PUT"
                IntegrationResponses:
                  -
                    ResponseParameters:
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                RequestParameters:
                    "integration.request.header.Content-Type": "method.request.header.Content-Type"
                    "integration.request.header.x-amz-meta-customLabels": "method.request.header.x-amz-meta-customLabels"
                    "integration.request.path.bucket": "method.request.path.bucket"
                    "integration.request.path.key": "method.request.path.key"
                TimeoutInMillis: 29000
                Type: "AWS"
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:s3:path/{bucket}/{key}"

    ApiGatewayMethod4:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResource4
            HttpMethod: "OPTIONS"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            RequestParameters: {}
            MethodResponses:
              -
                ResponseParameters:
                    "method.response.header.Access-Control-Allow-Headers": false
                    "method.response.header.Access-Control-Allow-Methods": false
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
            Integration:
                CacheNamespace: !Ref ApiGatewayResource4
                IntegrationResponses:
                  -
                    ResponseParameters:
                        "method.response.header.Access-Control-Allow-Headers": "'*'"
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                RequestTemplates:
                    "application/json": "{\"statusCode\": 200}"
                TimeoutInMillis: 29000
                Type: "MOCK"

    ApiGatewayModel:
        Type: "AWS::ApiGateway::Model"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Name: "Errorcf"
            Schema: |
                {
                  "type" : "object",
                  "properties" : {
                    "code" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "message" : {
                      "type" : "string"
                    }
                  }
                }
            ContentType: "application/json"

    ApiGatewayModel2:
        Type: "AWS::ApiGateway::Model"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Name: "Photocf"
            Schema: |
                {
                  "type" : "object",
                  "properties" : {
                    "url" : {
                      "type" : "string"
                    },
                    "labels" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  }
                }
            ContentType: "application/json"

    ApiGatewayModel3:
        Type: "AWS::ApiGateway::Model"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Name: "SearchResponsecf"
            Schema: !Sub |
                {
                  "type" : "object",
                  "properties" : {
                    "results" : {
                      "type" : "array",
                      "items" : {
                        "$ref":"https://apigateway.amazonaws.com/restapis/${ApiGatewayRestApi}/models/${ApiGatewayModel2}"
                      }
                    }
                  }
                }
            ContentType: "application/json"

    ApiGatewayModel4:
        Type: "AWS::ApiGateway::Model"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Name: "MODEL623f51cf"
            Schema: |
                {
                  "type" : "object",
                  "properties" : { }
                }
            ContentType: "application/json"

    IAMManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "apigw-to-s3-policy-cf"
            Path: "/"
            PolicyDocument: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "VisualEditor0",
                            "Effect": "Allow",
                            "Action": "s3:PutObject",
                            "Resource": "arn:aws:s3:::6998-photo-album-b2-cf/*"
                        }
                    ]
                }

    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "APIGW-S3-Proxy-cf"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"apigateway.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
                - !Ref IAMManagedPolicy
            Description: "Allows API Gateway to forward your PUT request directly to S3."

    OpenSearchServiceDomain:
      Type: "AWS::OpenSearchService::Domain"
      Properties:
        DomainName: "photos-cf"
        EngineVersion: "OpenSearch_2.5"
        ClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: 1
          InstanceType: "t3.small.search"
          ZoneAwarenessEnabled: false
          WarmEnabled: false
        SnapshotOptions: { }
        EncryptionAtRestOptions:
          Enabled: true
          KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/62f5ae3b-2958-4c0b-bf86-f59831125100"
        NodeToNodeEncryptionOptions:
          Enabled: true
        AdvancedOptions:
          "indices.fielddata.cache.size": "20"
          "indices.query.bool.max_clause_count": "1024"
          override_main_response_version: "false"
          "rest.action.multi.allow_explicit_index": "true"
        EBSOptions:
          EBSEnabled: true
          VolumeType: "gp3"
          VolumeSize: 10
          Iops: 3000
          Throughput: 125
        CognitoOptions:
          Enabled: false
        DomainEndpointOptions:
          EnforceHTTPS: true
          TLSSecurityPolicy: "Policy-Min-TLS-1-0-2019-07"
          CustomEndpointEnabled: false
